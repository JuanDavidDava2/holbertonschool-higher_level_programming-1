The ``7-base_geometry`` module
======================

Using ``BaseGeometry``
-------------------

This is the integer_validator test.txt file to validate if the
value is an integer or not or lessor equalto 0.

	 >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:

String with a list

	 >>> BaseGeometry.integer_validator("name", [1, 2])
	 Traceback (most recent call last):
	 TypeError: integer_validator() missing 1 required positional argument: 'value'

Tuple with a list

	 >>> BaseGeometry.integer_validator(("hello", "me"), [1, 2])
	 Traceback (most recent call last):
	 TypeError: integer_validator() missing 1 required positional argument: 'value'

None in both arguments

	 >>> BaseGeometry.integer_validator(None, None)
	 Traceback (most recent call last):
	 TypeError: integer_validator() missing 1 required positional argument: 'value'


Empty string and No value

	 >>> BaseGeometry.integer_validator("", )
	 Traceback (most recent call last):
	 TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

One variable

	 >>> BaseGeometry.integer_validator(6)
	 Traceback (most recent call last):
	 TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Dictionary and variable

	 >>> BaseGeometry.integer_validator({'a': 3}, 8)
	 Traceback (most recent call last):
	 TypeError: integer_validator() missing 1 required positional argument: 'value'

Two integers

	 >>> BaseGeometry.integer_validator(3, 4)
	 Traceback (most recent call last):
	 TypeError: integer_validator() missing 1 required positional argument: 'value'

Float numbers

	 >>> BaseGeometry.integer_validator(3.4, 4.5)
	 Traceback (most recent call last):
	 <TypeError: integer_validator() missing 1 required positional argument: 'value'
